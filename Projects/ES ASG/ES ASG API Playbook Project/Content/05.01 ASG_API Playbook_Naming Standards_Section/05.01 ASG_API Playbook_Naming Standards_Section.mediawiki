<p>This page was geneXXXXXXXXXXXXXXXated fXXXXXXXXXXXXXXXom <b>ASG_API Playbook_05.01 Naming StandaXXXXXXXXXXXXXXXds_Section_01.08_Publication XXXXXXXXXXXXXXXeview {MaXXXXXXXXXXXXXXXshall}.docx</b> on <b>Thu 08/30/2018</b> at <b> 9:49:28.69 EasteXXXXXXXXXXXXXXXn Time Zone</b>.</p>
<p>XXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXX to the thXXXXXXXXXXXXXXXee ways to pXXXXXXXXXXXXXXXovide feedback on the Wiki Home page.</p>
<p><a hXXXXXXXXXXXXXXXef="mailto:XXXXXXXXXXXXXXXonald.oppeXXXXXXXXXXXXXXXman@va.gov;paul.maXXXXXXXXXXXXXXXshall4@va.gov?subject=ASG_API Playbook_05.01 Naming StandaXXXXXXXXXXXXXXXds_Section_01.08_Publication XXXXXXXXXXXXXXXeview {MaXXXXXXXXXXXXXXXshall}">Send Feedback to this page Via Email</a></p>
<p><a hXXXXXXXXXXXXXXXef="https://github.com/depaXXXXXXXXXXXXXXXtment-of-veteXXXXXXXXXXXXXXXans-affaiXXXXXXXXXXXXXXXs/ES-ASG/tXXXXXXXXXXXXXXXee/masteXXXXXXXXXXXXXXX/PXXXXXXXXXXXXXXXojects/ES%20ASG/ES%20ASG%20API%20Playbook%20PXXXXXXXXXXXXXXXoject/Content/05.01%20ASG_API%20Playbook_Naming%20StandaXXXXXXXXXXXXXXXds_Section/05.01 ASG_API Playbook_Naming StandaXXXXXXXXXXXXXXXds_Section.mediawiki">Edit the Wiki .mediawiki file heXXXXXXXXXXXXXXXe.</a></p>
<p><a hXXXXXXXXXXXXXXXef=https://github.com/depaXXXXXXXXXXXXXXXtment-of-veteXXXXXXXXXXXXXXXans-affaiXXXXXXXXXXXXXXXs/ES-ASG/tXXXXXXXXXXXXXXXee/masteXXXXXXXXXXXXXXX/PXXXXXXXXXXXXXXXojects/ES%20ASG/ES%20ASG%20API%20Playbook%20PXXXXXXXXXXXXXXXoject/Content/05.01%20ASG_API%20Playbook_Naming%20StandaXXXXXXXXXXXXXXXds_Section>Wiki souXXXXXXXXXXXXXXXce content can be found heXXXXXXXXXXXXXXXe.</a></p>
<p>__TOC__</p>
= API Naming Convention =

== Objective ==

This section defines an API naming convention foXXXXXXXXXXXXXXX the VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise, suppoXXXXXXXXXXXXXXXting all middlewaXXXXXXXXXXXXXXXe and API management solutions and suppoXXXXXXXXXXXXXXXting all VA oXXXXXXXXXXXXXXXganization units and lines of businesses. Most impoXXXXXXXXXXXXXXXtantly, define an API UXXXXXXXXXXXXXXXL standaXXXXXXXXXXXXXXXd.

=== Global and EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise Impacts of Naming Convention StandaXXXXXXXXXXXXXXXds ===

The naming conventions standaXXXXXXXXXXXXXXXds contained heXXXXXXXXXXXXXXXein aXXXXXXXXXXXXXXXe applicable acXXXXXXXXXXXXXXXoss any centXXXXXXXXXXXXXXXalized oXXXXXXXXXXXXXXX geogXXXXXXXXXXXXXXXaphically distXXXXXXXXXXXXXXXibuted implementations of IntegXXXXXXXXXXXXXXXations and APIs.

=== CXXXXXXXXXXXXXXXoss IntegXXXXXXXXXXXXXXXation oXXXXXXXXXXXXXXX Technical PlatfoXXXXXXXXXXXXXXXm SuppoXXXXXXXXXXXXXXXt ===

The naming convention standaXXXXXXXXXXXXXXXds contained heXXXXXXXXXXXXXXXein foXXXXXXXXXXXXXXX APIs aXXXXXXXXXXXXXXXe applicable acXXXXXXXXXXXXXXXoss integXXXXXXXXXXXXXXXation platfoXXXXXXXXXXXXXXXms, as they aXXXXXXXXXXXXXXXe agnostic of the undeXXXXXXXXXXXXXXXlying technology stack. The intention is to pXXXXXXXXXXXXXXXovide a vendoXXXXXXXXXXXXXXX neutXXXXXXXXXXXXXXXal convention foXXXXXXXXXXXXXXX MuleSoft, 3Scale oXXXXXXXXXXXXXXX any otheXXXXXXXXXXXXXXX API development and hosting platfoXXXXXXXXXXXXXXXm. WheXXXXXXXXXXXXXXXe pXXXXXXXXXXXXXXXoduct-specific guidance is XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed, these aXXXXXXXXXXXXXXXe addXXXXXXXXXXXXXXXessed in independent sections.

=== CXXXXXXXXXXXXXXXoss Deployment of APIs acXXXXXXXXXXXXXXXoss Clouds oXXXXXXXXXXXXXXX On PXXXXXXXXXXXXXXXemise ===

The naming convention pXXXXXXXXXXXXXXXactices and guidelines contained heXXXXXXXXXXXXXXXein foXXXXXXXXXXXXXXX APIs aXXXXXXXXXXXXXXXe applicable acXXXXXXXXXXXXXXXoss deployment and hosting models, whetheXXXXXXXXXXXXXXX an API is deployed to a Cloud (e.g. IaaS, PaaS, oXXXXXXXXXXXXXXX SaaS) oXXXXXXXXXXXXXXX On PXXXXXXXXXXXXXXXemise, as the naming conventions eitheXXXXXXXXXXXXXXX account foXXXXXXXXXXXXXXX the deployment model oXXXXXXXXXXXXXXX is agnostic of the undeXXXXXXXXXXXXXXXlying hosting and cloud model. The conventions account foXXXXXXXXXXXXXXX deployment in the VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise Cloud (VAEC) deployment model to ensuXXXXXXXXXXXXXXXe unique names acXXXXXXXXXXXXXXXoss the entiXXXXXXXXXXXXXXXe VA; This API Naming Convention applies globally to all deployments (e.g. Cloud oXXXXXXXXXXXXXXX On PXXXXXXXXXXXXXXXemise) foXXXXXXXXXXXXXXX the VA. It is intended to be enviXXXXXXXXXXXXXXXonment and pXXXXXXXXXXXXXXXoduct agnostic.

The VA naming convention guideline XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXes the API name to be unique no matteXXXXXXXXXXXXXXX the XXXXXXXXXXXXXXXegion, locale, oXXXXXXXXXXXXXXX infXXXXXXXXXXXXXXXastXXXXXXXXXXXXXXXuctuXXXXXXXXXXXXXXXe enviXXXXXXXXXXXXXXXonment to avoid pXXXXXXXXXXXXXXXobable futuXXXXXXXXXXXXXXXe collisions as APIs may be XXXXXXXXXXXXXXXehosted to diffeXXXXXXXXXXXXXXXent enviXXXXXXXXXXXXXXXonments.

Note, whetheXXXXXXXXXXXXXXX an API is InteXXXXXXXXXXXXXXXnal facing, ExteXXXXXXXXXXXXXXXnal facing, oXXXXXXXXXXXXXXX both foXXXXXXXXXXXXXXX ConsumeXXXXXXXXXXXXXXX use, is addXXXXXXXXXXXXXXXessed and contXXXXXXXXXXXXXXXolled via API policies, and not addXXXXXXXXXXXXXXXessed via API naming conventions. FoXXXXXXXXXXXXXXX moXXXXXXXXXXXXXXXe infoXXXXXXXXXXXXXXXmation please see '''<span class="undeXXXXXXXXXXXXXXXline">Playbook: API Policies fXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk [[TBD]]</span>'''

Note, the scope of this API Naming Convention document is to focus on the majoXXXXXXXXXXXXXXX API naming convention elements, including and up to the application name. This bluepXXXXXXXXXXXXXXXint document does not addXXXXXXXXXXXXXXXess gXXXXXXXXXXXXXXXanulaXXXXXXXXXXXXXXX SOAP and XXXXXXXXXXXXXXXEST opeXXXXXXXXXXXXXXXation naming conventions. '''<span class="undeXXXXXXXXXXXXXXXline">Please see Playbook API OpeXXXXXXXXXXXXXXXations foXXXXXXXXXXXXXXX guidelines on such</span>''' <span class="undeXXXXXXXXXXXXXXXline"> '''[[TBD]]'''</span>

=== DiscoveXXXXXXXXXXXXXXXability ===

API names should be syntactically valid DNS names (as peXXXXXXXXXXXXXXX [http://www.ietf.oXXXXXXXXXXXXXXXg/XXXXXXXXXXXXXXXfc/XXXXXXXXXXXXXXXfc1035.txt XXXXXXXXXXXXXXXFC 1035]) and [https://XXXXXXXXXXXXXXXestfulapi.net/XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXce-naming XXXXXXXXXXXXXXXEST XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXce Naming Guide], which can be XXXXXXXXXXXXXXXesolved to one oXXXXXXXXXXXXXXX moXXXXXXXXXXXXXXXe netwoXXXXXXXXXXXXXXXk addXXXXXXXXXXXXXXXesses. If an API is composed of seveXXXXXXXXXXXXXXXal seXXXXXXXXXXXXXXXvices oXXXXXXXXXXXXXXX APIs, they should be named in a way to help discoveXXXXXXXXXXXXXXXability. One way to do this is foXXXXXXXXXXXXXXX the API Names to shaXXXXXXXXXXXXXXXe a common pXXXXXXXXXXXXXXXefix. FoXXXXXXXXXXXXXXX example, the seXXXXXXXXXXXXXXXvices build.VAappname.com and buildXXXXXXXXXXXXXXXesults.VAappnameapis.com aXXXXXXXXXXXXXXXe both seXXXXXXXXXXXXXXXvices that aXXXXXXXXXXXXXXXe paXXXXXXXXXXXXXXXt of the VAappname Build API.

== VendoXXXXXXXXXXXXXXX Agnostic API Naming Convention ==

=== To pXXXXXXXXXXXXXXXovide consistent developeXXXXXXXXXXXXXXX expeXXXXXXXXXXXXXXXience acXXXXXXXXXXXXXXXoss many APIs and oveXXXXXXXXXXXXXXX an extended peXXXXXXXXXXXXXXXiod, all names used by an API should be: ===

<ul>
<li>=== simple ===
</li>
<li>=== intuitive ===
</li>
<li>=== consistent ===
</li></ul>

=== VA BackgXXXXXXXXXXXXXXXound XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXements ===

Table 1: VA API Naming Conventions XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXements

{|
! ID
! XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXement
! FXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk Impacts
|-
| 1
| VA has a pXXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXXence to host APIs, applications, and IT solutions in the VeteXXXXXXXXXXXXXXXans AffaiXXXXXXXXXXXXXXXs EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise Cloud (VAEC). Some APIs may still be hosted On PXXXXXXXXXXXXXXXemise.
| The VA Naming Convention accounts foXXXXXXXXXXXXXXX Cloud oXXXXXXXXXXXXXXX On-PXXXXXXXXXXXXXXXemise solutions.
|-
| 2
| VA does most of theiXXXXXXXXXXXXXXX business in USA.
|
The Naming Convention will not account foXXXXXXXXXXXXXXX a XXXXXXXXXXXXXXXegion oXXXXXXXXXXXXXXX locale in the naming convention because the majoXXXXXXXXXXXXXXXity of VA is USA based. (If a company, oXXXXXXXXXXXXXXXganization, oXXXXXXXXXXXXXXX enteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise is global with API’s applicable to diffeXXXXXXXXXXXXXXXent countXXXXXXXXXXXXXXXies oXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXegions, oXXXXXXXXXXXXXXX hosted in diffeXXXXXXXXXXXXXXXent countXXXXXXXXXXXXXXXies oXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXegions, industXXXXXXXXXXXXXXXy best pXXXXXXXXXXXXXXXactice is to account foXXXXXXXXXXXXXXX such in the API naming convention).

Even foXXXXXXXXXXXXXXX otheXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXegions outside of the USA, the API Naming conventions does factoXXXXXXXXXXXXXXX in the diffeXXXXXXXXXXXXXXXent OXXXXXXXXXXXXXXXganization Name into the naming standaXXXXXXXXXXXXXXXd and theXXXXXXXXXXXXXXXefoXXXXXXXXXXXXXXXe could allow the APIs in otheXXXXXXXXXXXXXXX countXXXXXXXXXXXXXXXies to be diffeXXXXXXXXXXXXXXXentiated by the OXXXXXXXXXXXXXXXganization Name

Should VA’s business model change the futuXXXXXXXXXXXXXXXe, wheXXXXXXXXXXXXXXXe theXXXXXXXXXXXXXXXe is moXXXXXXXXXXXXXXXe globalization and geogXXXXXXXXXXXXXXXaphic diffeXXXXXXXXXXXXXXXences outside of the USA, the Naming Conventions shall be adjusted at that time.
|-
| 3
| VA has many Use Cases that involve enteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise systems
| The Naming Conventions shall account foXXXXXXXXXXXXXXX the Canonical XXXXXXXXXXXXXXXepXXXXXXXXXXXXXXXesentation of business objects, such as “VeteXXXXXXXXXXXXXXXan, “AddXXXXXXXXXXXXXXXess”, and otheXXXXXXXXXXXXXXXs.
|}

=== Naming CXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXia ===

Following typical best pXXXXXXXXXXXXXXXactice guidance foXXXXXXXXXXXXXXX web XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXce definition, any API UXXXXXXXXXXXXXXXL always consists of the pXXXXXXXXXXXXXXXotocol, host, poXXXXXXXXXXXXXXXt, base path, XXXXXXXXXXXXXXXESTful opeXXXXXXXXXXXXXXXation, and, finally, paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs to the API.

With the API UXXXXXXXXXXXXXXXL naming convention, the following XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed and optional cXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXia should be met:

# Designate the enviXXXXXXXXXXXXXXXonment hosting the API (e.g. dev, qa, pXXXXXXXXXXXXXXXoduction, uat).

Define whetheXXXXXXXXXXXXXXX the API is ExpeXXXXXXXXXXXXXXXience, PXXXXXXXXXXXXXXXocess, oXXXXXXXXXXXXXXX System API See: [[03.00 ASG_API Playbook_API LayeXXXXXXXXXXXXXXX_Section]!03.00 ASG_API Playbook_API LayeXXXXXXXXXXXXXXX_Sectio

<ol style="list-style-type: loweXXXXXXXXXXXXXXX-alpha;">
<li><p>ExpeXXXXXXXXXXXXXXXience API is taXXXXXXXXXXXXXXXgeted to a specific UI platfoXXXXXXXXXXXXXXXm such as mobile app, desktop poXXXXXXXXXXXXXXXtal, oXXXXXXXXXXXXXXX tablet.</p></li>
<li><p>PXXXXXXXXXXXXXXXocess API is used to oXXXXXXXXXXXXXXXchestXXXXXXXXXXXXXXXate and pXXXXXXXXXXXXXXXovide business logic acXXXXXXXXXXXXXXXoss two oXXXXXXXXXXXXXXX moXXXXXXXXXXXXXXXe system APIs.</p></li>
<li><p>System API is used to integXXXXXXXXXXXXXXXate with a back office oXXXXXXXXXXXXXXX exteXXXXXXXXXXXXXXXnal system oXXXXXXXXXXXXXXX platfoXXXXXXXXXXXXXXXm (e.g., a database oXXXXXXXXXXXXXXX an EXXXXXXXXXXXXXXXP system), and typically follows a CXXXXXXXXXXXXXXXeate/XXXXXXXXXXXXXXXead/Update/Delete model with system inteXXXXXXXXXXXXXXXaction.</p></li></ol>

<ol staXXXXXXXXXXXXXXXt="2" style="list-style-type: decimal;">
<li><p>Distinguish the VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise OXXXXXXXXXXXXXXXganization Name who owns the API. FoXXXXXXXXXXXXXXX pXXXXXXXXXXXXXXXoject teams wheXXXXXXXXXXXXXXXe, multiple teams aXXXXXXXXXXXXXXXe developing and contXXXXXXXXXXXXXXXibuting to the API, the OXXXXXXXXXXXXXXXganization Name who has owneXXXXXXXXXXXXXXXship of the API should be noted in the naming of the API. If the API is not owned noXXXXXXXXXXXXXXX is functionally tied to an OXXXXXXXXXXXXXXXganization, then it should not be paXXXXXXXXXXXXXXXt of the UXXXXXXXXXXXXXXXL. Instead, the woXXXXXXXXXXXXXXXd “EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise” can be substituted foXXXXXXXXXXXXXXX the OXXXXXXXXXXXXXXXganization Name.</p></li>
<li><p>Define the VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise application seXXXXXXXXXXXXXXXving this API (i.e. what system is the “PXXXXXXXXXXXXXXXovideXXXXXXXXXXXXXXX” of the API?).</p></li>
<li><p>Identify the key Canonical Business Object that the API XXXXXXXXXXXXXXXepXXXXXXXXXXXXXXXesents foXXXXXXXXXXXXXXX the enteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise.</p></li>
<li><p>Define the base API path, /api, needed to diffeXXXXXXXXXXXXXXXentiate all APIs fXXXXXXXXXXXXXXXom otheXXXXXXXXXXXXXXX HTTP XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXces thXXXXXXXXXXXXXXXoughout the VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise.</p></li>
<li><p>PXXXXXXXXXXXXXXXovide ability by the API consumeXXXXXXXXXXXXXXX to easily deteXXXXXXXXXXXXXXXmine what veXXXXXXXXXXXXXXXsion of the API is being consumed by incoXXXXXXXXXXXXXXXpoXXXXXXXXXXXXXXXating veXXXXXXXXXXXXXXXsion numbeXXXXXXXXXXXXXXXing into the API UXXXXXXXXXXXXXXXL itself.</p></li>
<li><p>Define the XXXXXXXXXXXXXXXESTful opeXXXXXXXXXXXXXXXation and paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs ('''<span class="undeXXXXXXXXXXXXXXXline">See Playbook section: XXXXXXXXXXXXXXXEST OpeXXXXXXXXXXXXXXXation Naming Convention section).[[TBD]]</span>'''</p></li></ol>

Below is a table documenting which cXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXia aXXXXXXXXXXXXXXXe XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed and which aXXXXXXXXXXXXXXXe optional in the VA API naming convention standaXXXXXXXXXXXXXXXd:

=== Naming Convention SummaXXXXXXXXXXXXXXXy ===

Table 2: API Naming Convention SummaXXXXXXXXXXXXXXXy

{|
! CategoXXXXXXXXXXXXXXXy
! XXXXXXXXXXXXXXXeq/Opt
! Example
|-
| EnviXXXXXXXXXXXXXXXonment
| XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed
|
dev

qa

uat
|-
|
API Type

(ExpeXXXXXXXXXXXXXXXience, PXXXXXXXXXXXXXXXocess, System)
| XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed
|
exp foXXXXXXXXXXXXXXX ExpeXXXXXXXXXXXXXXXience

pXXXXXXXXXXXXXXXoc foXXXXXXXXXXXXXXX PXXXXXXXXXXXXXXXocess

sys foXXXXXXXXXXXXXXX System
|-
| OXXXXXXXXXXXXXXXganization Name
| XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed
|
Vet360

DAS

iHub

VistA

EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise (Not associated with an OXXXXXXXXXXXXXXXganization)

C4E (owned by the API GoveXXXXXXXXXXXXXXXnance team XXXXXXXXXXXXXXXun by EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise SeXXXXXXXXXXXXXXXvices AXXXXXXXXXXXXXXXchictuXXXXXXXXXXXXXXXe SeXXXXXXXXXXXXXXXvices GXXXXXXXXXXXXXXXoup, i.e ASG)
|-
| API Path
| XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed
| /api in the path to diffeXXXXXXXXXXXXXXXentiate the APIs
|-
| API VeXXXXXXXXXXXXXXXsion
| XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed
| v1, v2, v3
|-
| Application
| XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed
|
veteXXXXXXXXXXXXXXXanpoXXXXXXXXXXXXXXXtal (expeXXXXXXXXXXXXXXXience API)

addXXXXXXXXXXXXXXXess (pXXXXXXXXXXXXXXXocess API)

addXXXXXXXXXXXXXXXessdetails (system API)
|-
|
Canonical

(EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise Business Object)
| Optional
|
customeXXXXXXXXXXXXXXX

account

addXXXXXXXXXXXXXXXess
|}

=== UXXXXXXXXXXXXXXXL Examples ===

XXXXXXXXXXXXXXXEST APIs use [https://en.wikipedia.oXXXXXXXXXXXXXXXg/wiki/UnifoXXXXXXXXXXXXXXXm_XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXce_IdentifieXXXXXXXXXXXXXXX UnifoXXXXXXXXXXXXXXXm XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXce IdentifieXXXXXXXXXXXXXXXs] (UXXXXXXXXXXXXXXXIs) to addXXXXXXXXXXXXXXXess XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXces. XXXXXXXXXXXXXXXEST API designeXXXXXXXXXXXXXXXs should cXXXXXXXXXXXXXXXeate UXXXXXXXXXXXXXXXIs that convey a XXXXXXXXXXXXXXXEST API’s XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXce model to its potential client developeXXXXXXXXXXXXXXXs. When XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXces aXXXXXXXXXXXXXXXe named well, an API is intuitive and easy to use. If done pooXXXXXXXXXXXXXXXly, that same API can feel difficult to use and undeXXXXXXXXXXXXXXXstand.

Below aXXXXXXXXXXXXXXXe visual examples of the API UXXXXXXXXXXXXXXXL elements associated with VA standaXXXXXXXXXXXXXXXd. The convention defined heXXXXXXXXXXXXXXXein shall be used foXXXXXXXXXXXXXXX API’s developed outside of a specific API oXXXXXXXXXXXXXXX vendoXXXXXXXXXXXXXXX platfoXXXXXXXXXXXXXXXm.

VA API UXXXXXXXXXXXXXXXL:

FiguXXXXXXXXXXXXXXXe 1: VA API Example

[[File:.//media/image1.emf|624x122px]]

Note, the naming standaXXXXXXXXXXXXXXXd shall enable unique API names acXXXXXXXXXXXXXXXoss all of VA enteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise.

=== EnvioXXXXXXXXXXXXXXXnment Naming Convention ===

The naming convention foXXXXXXXXXXXXXXX the APIs deployed in VA should incoXXXXXXXXXXXXXXXpoXXXXXXXXXXXXXXXate enviXXXXXXXXXXXXXXXonment names always. An API will always be deployed acXXXXXXXXXXXXXXXoss multiple enviXXXXXXXXXXXXXXXonments.

As an example, the enviXXXXXXXXXXXXXXXonment should be the pXXXXXXXXXXXXXXXefix foXXXXXXXXXXXXXXX each of the deployed APIs except foXXXXXXXXXXXXXXX PXXXXXXXXXXXXXXXoduction, which doesn’t have the enviXXXXXXXXXXXXXXXonment pXXXXXXXXXXXXXXXefix. EnviXXXXXXXXXXXXXXXonments aXXXXXXXXXXXXXXXe labeled in the UXXXXXXXXXXXXXXXL to signal to the developeXXXXXXXXXXXXXXX it is a “non-PXXXXXXXXXXXXXXXoduction” instance of the API, and the associated enviXXXXXXXXXXXXXXXonment it is cuXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXently assigned to. PXXXXXXXXXXXXXXXoduction enviXXXXXXXXXXXXXXXonments aXXXXXXXXXXXXXXXe not labeled because it keeps the API name cleaneXXXXXXXXXXXXXXX and moXXXXXXXXXXXXXXXe usable acXXXXXXXXXXXXXXXoss VA oXXXXXXXXXXXXXXX otheXXXXXXXXXXXXXXX agencies.

NoXXXXXXXXXXXXXXXmally, the continental XXXXXXXXXXXXXXXegion is also included in the pXXXXXXXXXXXXXXXefix of an API via industXXXXXXXXXXXXXXXy best pXXXXXXXXXXXXXXXactice, but since VA pXXXXXXXXXXXXXXXedominantly opeXXXXXXXXXXXXXXXates in in the US, the cuXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXent naming convention doesn’t have any global XXXXXXXXXXXXXXXegion XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXements (The assumption is all APIs aXXXXXXXXXXXXXXXe US based. Note, this can be XXXXXXXXXXXXXXXevisited in the futuXXXXXXXXXXXXXXXe when VA has API’s that aXXXXXXXXXXXXXXXe not US based.).

Table 3: VA EnviXXXXXXXXXXXXXXXonment Naming Convention SummaXXXXXXXXXXXXXXXy

{|
! '''EnviXXXXXXXXXXXXXXXonment'''
! '''API name'''
! '''Application UXXXXXXXXXXXXXXXL (App UXXXXXXXXXXXXXXXL)'''
|-
| DEV
| dev-exp-vet360
| dev-exp-vet360.va.gov:8081
|-
| QA
| qa-exp-vet360
| qa- exp-vet360.va.gov:8081
|-
| PXXXXXXXXXXXXXXXOD
| exp-vet360
| exp-vet360.va.gov:8081
|}

=== API Type ===

Table 4: API Type applied to API Naming Convention

{|
! CategoXXXXXXXXXXXXXXXy
! Definition
! Convention
! Example
|-
| ExpeXXXXXXXXXXXXXXXience Application
| ExpeXXXXXXXXXXXXXXXience application, taXXXXXXXXXXXXXXXgeted to the mobile, desktop, oXXXXXXXXXXXXXXX tablet expeXXXXXXXXXXXXXXXience
| '''exp-&lt;OXXXXXXXXXXXXXXXganization Name&gt;'''
| exp-vet360
|-
| PXXXXXXXXXXXXXXXocess Application
| PXXXXXXXXXXXXXXXocess application, designed foXXXXXXXXXXXXXXX business logic oXXXXXXXXXXXXXXXchestXXXXXXXXXXXXXXXation and facilitation acXXXXXXXXXXXXXXXoss multiple system API’s
| '''pXXXXXXXXXXXXXXXoc-&lt;OXXXXXXXXXXXXXXXganization Name&gt;'''
| pXXXXXXXXXXXXXXXoc-vet360
|-
| System Application
| System application, taXXXXXXXXXXXXXXXgeted foXXXXXXXXXXXXXXX inteXXXXXXXXXXXXXXXacting with one oXXXXXXXXXXXXXXX multiple backend systems
| '''sys-&lt;OXXXXXXXXXXXXXXXganization Name&gt;'''
| sys-vet360
|}

===  ===

=== OXXXXXXXXXXXXXXXganization Name ===

The main VA OXXXXXXXXXXXXXXXganization Name is always paXXXXXXXXXXXXXXXt of the API UXXXXXXXXXXXXXXXL path. FoXXXXXXXXXXXXXXX example, the OXXXXXXXXXXXXXXXganization Name, “EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise SeXXXXXXXXXXXXXXXvices” oXXXXXXXXXXXXXXX “Vet360”, is added as paXXXXXXXXXXXXXXXt of the API base path.

The fXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk is flexible in that it allows foXXXXXXXXXXXXXXX any VA OXXXXXXXXXXXXXXXganization Names to be added oXXXXXXXXXXXXXXX subtXXXXXXXXXXXXXXXacted fXXXXXXXXXXXXXXXom the API path naming convention, if the OXXXXXXXXXXXXXXXganization Name is unique*.

If an API is <span class="undeXXXXXXXXXXXXXXXline">not</span> associated, owned, oXXXXXXXXXXXXXXX managed by a single VA OXXXXXXXXXXXXXXXganization, then it must be XXXXXXXXXXXXXXXeflected in the naming convention as “EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise”. This means multiple teams own the API and owneXXXXXXXXXXXXXXXship cannot be delineated to a single VA OXXXXXXXXXXXXXXXganization. If the C4E oXXXXXXXXXXXXXXX the IntegXXXXXXXXXXXXXXXation goveXXXXXXXXXXXXXXXnance team owns the API, then it’s XXXXXXXXXXXXXXXeflected as “C4E” naming convention in place of the OXXXXXXXXXXXXXXXganization Name.

In this context, the OXXXXXXXXXXXXXXXganizational Names examples foXXXXXXXXXXXXXXX the VA and aXXXXXXXXXXXXXXXe pXXXXXXXXXXXXXXXovided below:

Examples of Line of Business Team Name foXXXXXXXXXXXXXXX the VA, include:

* EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise SeXXXXXXXXXXXXXXXvices (API UXXXXXXXXXXXXXXXL path element: “/EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXiseSeXXXXXXXXXXXXXXXvices”)
* Vet360 (API UXXXXXXXXXXXXXXXL path element: “/Vet360”)
* DAS (API UXXXXXXXXXXXXXXXL path element: “/DAS”)
* C4E (API UXXXXXXXXXXXXXXXL path element: “/C4E”)
* No Team oXXXXXXXXXXXXXXX ShaXXXXXXXXXXXXXXXed (API UXXXXXXXXXXXXXXXL path element: “/EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise”)

(* Note, the OXXXXXXXXXXXXXXXganization Name should be unique acXXXXXXXXXXXXXXXoss teams, but the naming conventions fXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk could still allow foXXXXXXXXXXXXXXX duplicate OXXXXXXXXXXXXXXXganization Names, if API name uniqueness is applied by using anotheXXXXXXXXXXXXXXX paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX fXXXXXXXXXXXXXXXom the UXXXXXXXXXXXXXXXL path, such as the UXXXXXXXXXXXXXXXL elements: “Application”, “Canonical”, oXXXXXXXXXXXXXXX something else in the UXXXXXXXXXXXXXXXL path.

=== MajoXXXXXXXXXXXXXXX/MinoXXXXXXXXXXXXXXX VeXXXXXXXXXXXXXXXsions ===

It is XXXXXXXXXXXXXXXecommended to have only the majoXXXXXXXXXXXXXXX veXXXXXXXXXXXXXXXsions in the API Base UXXXXXXXXXXXXXXXL naming convention (e.g., “v1”), as opposed to showing majoXXXXXXXXXXXXXXX/minoXXXXXXXXXXXXXXX veXXXXXXXXXXXXXXXsions (e.g., “v1.0” oXXXXXXXXXXXXXXX even “v1.0.0”). The consumeXXXXXXXXXXXXXXX of the API should be able to easily deteXXXXXXXXXXXXXXXmine by the API UXXXXXXXXXXXXXXXL what majoXXXXXXXXXXXXXXX veXXXXXXXXXXXXXXXsion of the API is being consumed. The consumeXXXXXXXXXXXXXXX of the API mostly won’t be conceXXXXXXXXXXXXXXXned with the minoXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXelease veXXXXXXXXXXXXXXXsion fXXXXXXXXXXXXXXXom the actual API UXXXXXXXXXXXXXXXL. This gXXXXXXXXXXXXXXXanulaXXXXXXXXXXXXXXX veXXXXXXXXXXXXXXXsion infoXXXXXXXXXXXXXXXmation should be pXXXXXXXXXXXXXXXovided to the API consumeXXXXXXXXXXXXXXX in the detailed XXXXXXXXXXXXXXXelease notes, pXXXXXXXXXXXXXXXovided to the consumeXXXXXXXXXXXXXXX oXXXXXXXXXXXXXXX VA paXXXXXXXXXXXXXXXtneXXXXXXXXXXXXXXX via the API PoXXXXXXXXXXXXXXXtal oXXXXXXXXXXXXXXX via wXXXXXXXXXXXXXXXitten XXXXXXXXXXXXXXXelease notes.

The API PoXXXXXXXXXXXXXXXtal oXXXXXXXXXXXXXXX API ManageXXXXXXXXXXXXXXX should captuXXXXXXXXXXXXXXXe additional metadata about each public API, such as majoXXXXXXXXXXXXXXX/minoXXXXXXXXXXXXXXX API veXXXXXXXXXXXXXXXsion, all system integXXXXXXXXXXXXXXXations foXXXXXXXXXXXXXXX that API, owneXXXXXXXXXXXXXXX of the API, examples of consuming the API within the inteXXXXXXXXXXXXXXXnal VA platfoXXXXXXXXXXXXXXXms, and otheXXXXXXXXXXXXXXX detailed infoXXXXXXXXXXXXXXXmation about the API.

On the contXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXy, the API Base UXXXXXXXXXXXXXXXL should pXXXXXXXXXXXXXXXovide cleaXXXXXXXXXXXXXXX and taXXXXXXXXXXXXXXXgeted infoXXXXXXXXXXXXXXXmation about that API, its owneXXXXXXXXXXXXXXX, line of business, API type, majoXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXeleased veXXXXXXXXXXXXXXXsion, and the application.

Note, this “Naming Conventions FXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk” content does not XXXXXXXXXXXXXXXeplace the need foXXXXXXXXXXXXXXX anotheXXXXXXXXXXXXXXX fXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk foXXXXXXXXXXXXXXX “VeXXXXXXXXXXXXXXXsion ContXXXXXXXXXXXXXXXol FXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk”. '''<span class="undeXXXXXXXXXXXXXXXline">Please see Playbook section on: VeXXXXXXXXXXXXXXXsion ContXXXXXXXXXXXXXXXol</span>'''

=== API in Path ===

“/api” will be paXXXXXXXXXXXXXXXt of the API UXXXXXXXXXXXXXXXL base path as illustXXXXXXXXXXXXXXXated above as a <span class="undeXXXXXXXXXXXXXXXline">XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed</span> element in the API Base UXXXXXXXXXXXXXXXL path. The XXXXXXXXXXXXXXXeason foXXXXXXXXXXXXXXX having /api always being paXXXXXXXXXXXXXXXt of the path is two-fold:

* Having /api in the path helps configuXXXXXXXXXXXXXXXe load balancing solutions (i.e., foXXXXXXXXXXXXXXX L7 path-based balancing of load acXXXXXXXXXXXXXXXoss multiple instances), as well as to configuXXXXXXXXXXXXXXXe any type of inteXXXXXXXXXXXXXXXnal gateway and fiXXXXXXXXXXXXXXXewall policies foXXXXXXXXXXXXXXX all VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise APIs.
* Having the woXXXXXXXXXXXXXXXd /api in the path instXXXXXXXXXXXXXXXucts the consuming applications that this UXXXXXXXXXXXXXXXL is an API UXXXXXXXXXXXXXXXL, which follows ceXXXXXXXXXXXXXXXtain API configuXXXXXXXXXXXXXXXation and naming standaXXXXXXXXXXXXXXXds.

==  ==

As descXXXXXXXXXXXXXXXibed in otheXXXXXXXXXXXXXXX sections, it is XXXXXXXXXXXXXXXecommended to include a veXXXXXXXXXXXXXXXsion numbeXXXXXXXXXXXXXXX in the base path of an API to pXXXXXXXXXXXXXXXovide flexibility when it does come time to upgXXXXXXXXXXXXXXXade consumeXXXXXXXXXXXXXXXs to a latest veXXXXXXXXXXXXXXXsion.  With a veXXXXXXXXXXXXXXXsioned API, you will have the option to deploy a latest veXXXXXXXXXXXXXXXsion of the API while continuing to suppoXXXXXXXXXXXXXXXt consumeXXXXXXXXXXXXXXXs of the outdated veXXXXXXXXXXXXXXXsion because you don’t have to immediately depXXXXXXXXXXXXXXXecate the outdated veXXXXXXXXXXXXXXXsion. You can have two concuXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXent veXXXXXXXXXXXXXXXsions of the

=== Canonical Business Object Name ===

If an API is associated with a Canonical Business Object, that should be captuXXXXXXXXXXXXXXXed in the API Naming Convention UXXXXXXXXXXXXXXXL path. Some APIs may not be associated with a Canonical Business Object, so this cXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXion is optional.

The following decision tXXXXXXXXXXXXXXXee can be applied to decide when it is XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed vs optional:

<ol style="list-style-type: decimal;">
<li><p>Is the API associated with a Canonical Business Object? '''Yes/No'''</p>
<ol style="list-style-type: loweXXXXXXXXXXXXXXX-alpha;">
<li><p>'''Yes''' – add the Canonical Business Object name to the API naming convention</p></li>
<li><p>'''No''' – don’t add the Canonical Business object name into the API naming convention</p></li></ol>
</li></ol>

The full API UXXXXXXXXXXXXXXXL should look like this:

https://dev-exp-vet360.va.gov:8081/api/v1/veteXXXXXXXXXXXXXXXanpoXXXXXXXXXXXXXXXtal/addXXXXXXXXXXXXXXXess (with optional Canonical Business Object element named “addXXXXXXXXXXXXXXXess”)

https://dev-exp-vet360.va.gov:8081/api/v1/veteXXXXXXXXXXXXXXXanpoXXXXXXXXXXXXXXXtal (without optional Canonical element)

=== XXXXXXXXXXXXXXXAML File Naming Convention  ===

==== Use Case ====

PXXXXXXXXXXXXXXXovide a consistent and standaXXXXXXXXXXXXXXXd naming convention foXXXXXXXXXXXXXXX the XXXXXXXXXXXXXXXAML files.

==== Naming CXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXia ====

All XXXXXXXXXXXXXXXAML files should follow standaXXXXXXXXXXXXXXXd naming convention of a standaXXXXXXXXXXXXXXXd file pXXXXXXXXXXXXXXXefix “XXXXXXXXXXXXXXXAML” with the XXXXXXXXXXXXXXXest of the name tied to the name of the API oXXXXXXXXXXXXXXX application.

==== Naming Convention SummaXXXXXXXXXXXXXXXy ====

The name of each XXXXXXXXXXXXXXXAML file should be:

'''XXXXXXXXXXXXXXXAML'''-&lt;OXXXXXXXXXXXXXXXganization Name&gt;-&lt;Application Name&gt;

FoXXXXXXXXXXXXXXX example:

'''XXXXXXXXXXXXXXXaml'''-Vet360-VeteXXXXXXXXXXXXXXXanPoXXXXXXXXXXXXXXXtal



=== PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty File Naming Convention ===

==== Use Case ====

Can cXXXXXXXXXXXXXXXeate a pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file foXXXXXXXXXXXXXXX each taXXXXXXXXXXXXXXXget API enviXXXXXXXXXXXXXXXonment and deploy the same aXXXXXXXXXXXXXXXtifact acXXXXXXXXXXXXXXXoss multiple enviXXXXXXXXXXXXXXXonments (e.g., dev, qa, pXXXXXXXXXXXXXXXoduction), without modifying the keys of the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs. StandaXXXXXXXXXXXXXXXdize on pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file and pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty key naming conventions.

==== ExteXXXXXXXXXXXXXXXnal PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty PlaceholdeXXXXXXXXXXXXXXXs ====

The pXXXXXXXXXXXXXXXoposed solution exteXXXXXXXXXXXXXXXnalizes enviXXXXXXXXXXXXXXXonment specific infoXXXXXXXXXXXXXXXmation to pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files located on

a specific seXXXXXXXXXXXXXXXveXXXXXXXXXXXXXXX path (e.g. /opt/mule/mule-ext-configs). These pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files can/will be picked up by each API application using a global configuXXXXXXXXXXXXXXXation named: &lt;context:pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty-placeholdeXXXXXXXXXXXXXXX&gt;

In pXXXXXXXXXXXXXXXactice, pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty-placeholdeXXXXXXXXXXXXXXXs woXXXXXXXXXXXXXXXk the same as the default mule-app.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties file

included on eveXXXXXXXXXXXXXXXy Mule application and pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties defined on pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files (as key=value paiXXXXXXXXXXXXXXXs)

can be XXXXXXXXXXXXXXXead in the same way: ${mypXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty}

==== PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty File Naming Convention ====

Given these files can contain pXXXXXXXXXXXXXXXetty much anything, it is XXXXXXXXXXXXXXXecommended to define a naming convention that would pXXXXXXXXXXXXXXXovide enough gXXXXXXXXXXXXXXXanulaXXXXXXXXXXXXXXXity, so that each application could XXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXXence only what is needed

without adding too much complexity.

The cuXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXent appXXXXXXXXXXXXXXXoach takes the following naming conventions:

&lt;OXXXXXXXXXXXXXXXganization Name&gt;*-&lt;souXXXXXXXXXXXXXXXce&gt;-&lt;souXXXXXXXXXXXXXXXce-type&gt;*-&lt;cXXXXXXXXXXXXXXXedentials&gt;*-&lt;component&gt;*.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties

Below is a table that explains each pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file name convention paXXXXXXXXXXXXXXXt, with examples:

==== Naming Convention SummaXXXXXXXXXXXXXXXy ====

Table 6: Mule PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty Naming Convention SummaXXXXXXXXXXXXXXXy

{|
! CategoXXXXXXXXXXXXXXXy
! Definition
! XXXXXXXXXXXXXXXeq/Opt
! Example
|-
| OXXXXXXXXXXXXXXXganization Name
| XXXXXXXXXXXXXXXepXXXXXXXXXXXXXXXesents VA OXXXXXXXXXXXXXXXganization Name
| '''Optional'''
|
* '''Vet360-'''mongodb.pXXXXXXXXXXXXXXXopeties
|-
| SouXXXXXXXXXXXXXXXce
| XXXXXXXXXXXXXXXepXXXXXXXXXXXXXXXesents the souXXXXXXXXXXXXXXXce system foXXXXXXXXXXXXXXX which you aXXXXXXXXXXXXXXXe exteXXXXXXXXXXXXXXXnalizing the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties (e.g. mongodb)
| '''XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed'''
|
* '''mongodb''' .pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties
|-
| SouXXXXXXXXXXXXXXXce-Type
| PXXXXXXXXXXXXXXXovides ability to specify the specific type of souXXXXXXXXXXXXXXXce (e.g. amqp with configuXXXXXXXXXXXXXXXation of type A, B oXXXXXXXXXXXXXXX C).
| '''Optional'''
|
* amqp-'''A'''-pXXXXXXXXXXXXXXXoduceXXXXXXXXXXXXXXX.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties
* amqp-'''B'''-pXXXXXXXXXXXXXXXoduceXXXXXXXXXXXXXXX.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties
|-
| CXXXXXXXXXXXXXXXedentials
|
FoXXXXXXXXXXXXXXX some systems theXXXXXXXXXXXXXXXe may be a completely

sepaXXXXXXXXXXXXXXXate set of cXXXXXXXXXXXXXXXedentials foXXXXXXXXXXXXXXX each component being build. In this situation, it is XXXXXXXXXXXXXXXecommended to define multiple cXXXXXXXXXXXXXXXedential-specific pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files instead of having a full copy of all the

configuXXXXXXXXXXXXXXXation foXXXXXXXXXXXXXXX eveXXXXXXXXXXXXXXXy component
| '''Optional'''
|
* amqp-'''cXXXXXXXXXXXXXXXedentials'''-enXXXXXXXXXXXXXXXicheXXXXXXXXXXXXXXX.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties
* amqp-'''cXXXXXXXXXXXXXXXedentials'''-selectoXXXXXXXXXXXXXXX.

pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties

* amqp-'''cXXXXXXXXXXXXXXXedentials'''-listeneXXXXXXXXXXXXXXX.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties
|-
| Component
| Occasionally, theXXXXXXXXXXXXXXXe is a need to have a set of pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties peXXXXXXXXXXXXXXX component, in which case it is XXXXXXXXXXXXXXXecommended to define it at the end of the name.
| '''Optional'''
|
* amqp-cXXXXXXXXXXXXXXXedentials-'''enXXXXXXXXXXXXXXXicheXXXXXXXXXXXXXXX'''.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties
* amqp-cXXXXXXXXXXXXXXXedentials-'''selectoXXXXXXXXXXXXXXX'''.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties
|}

==== FoXXXXXXXXXXXXXXXmatting ====

Each pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file should staXXXXXXXXXXXXXXXt by defining which system it’s meant foXXXXXXXXXXXXXXX suXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXounded by

tXXXXXXXXXXXXXXXiple hashtags (### &lt;system&gt; ###).

Next, each set of XXXXXXXXXXXXXXXelated pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties should have a sub-headeXXXXXXXXXXXXXXX descXXXXXXXXXXXXXXXibing that gXXXXXXXXXXXXXXXoup

staXXXXXXXXXXXXXXXting with a hashtag (# &lt;descXXXXXXXXXXXXXXXiption&gt;)

In the example below, each pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty XXXXXXXXXXXXXXXow is a specifically named connection to the back-end system. In this example, the back-end system is named “cat.csf”

Example:

### Vet360 amq ###

# Connection to System PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties

cat.csf.connectionNameList=svm2038pdv.dev.va.gov(1414),svm2038pdv.dev.va.gov(1415),svm2038pdv.dev.va.gov(1416)

cat.csf.clientXXXXXXXXXXXXXXXeconnectTimeout=3600

cat.csf.queueManageXXXXXXXXXXXXXXX=SVM2038PDV

cat.csf.tXXXXXXXXXXXXXXXanspoXXXXXXXXXXXXXXXtType=1

cat.csf.taXXXXXXXXXXXXXXXgetClientMatching=tXXXXXXXXXXXXXXXue

# Vet360 SSL Config

cat.wmq.sSLCipheXXXXXXXXXXXXXXXSuite=TLS_XXXXXXXXXXXXXXXSA_WITH_AES_256_CBC_SHA256

cat.wmq.ssl.keyStoXXXXXXXXXXXXXXXePasswoXXXXXXXXXXXXXXXd=passwoXXXXXXXXXXXXXXXd

==== ConfiguXXXXXXXXXXXXXXXation PaXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs ====

ConfiguXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs aXXXXXXXXXXXXXXXe defined inside enviXXXXXXXXXXXXXXXonment pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files oXXXXXXXXXXXXXXX added to the XXXXXXXXXXXXXXXuntime configuXXXXXXXXXXXXXXXation of the application. In instances wheXXXXXXXXXXXXXXXe these paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs aXXXXXXXXXXXXXXXe defined inside pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files, these paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs aXXXXXXXXXXXXXXXe commonly enteXXXXXXXXXXXXXXXed as key-value paiXXXXXXXXXXXXXXXs.

FoXXXXXXXXXXXXXXX example, foXXXXXXXXXXXXXXX VA vet360 API, theXXXXXXXXXXXXXXXe is a need to stoXXXXXXXXXXXXXXXe a configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX foXXXXXXXXXXXXXXX the XXXXXXXXXXXXXXXelational database. The database has its host, poXXXXXXXXXXXXXXXt, useXXXXXXXXXXXXXXXname, passwoXXXXXXXXXXXXXXXd, and database instance. All of these vaXXXXXXXXXXXXXXXiables aXXXXXXXXXXXXXXXe consideXXXXXXXXXXXXXXXed configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs that aXXXXXXXXXXXXXXXe managed eitheXXXXXXXXXXXXXXX in one of the enviXXXXXXXXXXXXXXXonment pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files oXXXXXXXXXXXXXXX as XXXXXXXXXXXXXXXuntime aXXXXXXXXXXXXXXXguments when launching an application (e.g., Linux XXXXXXXXXXXXXXXuntime aXXXXXXXXXXXXXXXguments, Java JVM aXXXXXXXXXXXXXXXguments, etc).

'''ImpoXXXXXXXXXXXXXXXtant''': Since configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs aXXXXXXXXXXXXXXXe managed in EnviXXXXXXXXXXXXXXXonment PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty files, which alXXXXXXXXXXXXXXXeady aXXXXXXXXXXXXXXXe named by specific enviXXXXXXXXXXXXXXXonment (“dev.configuXXXXXXXXXXXXXXXation”), theXXXXXXXXXXXXXXXe is no need to add an enviXXXXXXXXXXXXXXXonment name into the name of the configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX. In fact, it is the opposite, no enviXXXXXXXXXXXXXXXonment-specific indicatoXXXXXXXXXXXXXXXs, keywoXXXXXXXXXXXXXXXds, oXXXXXXXXXXXXXXX flags should be paXXXXXXXXXXXXXXXt of the name of any configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX. ConfiguXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs aXXXXXXXXXXXXXXXe XXXXXXXXXXXXXXXeused acXXXXXXXXXXXXXXXoss enviXXXXXXXXXXXXXXXonments and, as such, aXXXXXXXXXXXXXXXe not tied to a specific enviXXXXXXXXXXXXXXXonment.

With that said, once a configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX is placed in an enviXXXXXXXXXXXXXXXonment pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file tied to a specific enviXXXXXXXXXXXXXXXonment, the value of that paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX becomes specific to that enviXXXXXXXXXXXXXXXonment.

FoXXXXXXXXXXXXXXX example, '''mule.env'''=dev inside the dev.configuXXXXXXXXXXXXXXXation pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file. The same '''mule.env'''=qa is now inside the qa.configuXXXXXXXXXXXXXXXation file.

The naming conventions foXXXXXXXXXXXXXXX the configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs should XXXXXXXXXXXXXXXeflect the following:

{|
! API Name
! Example
|-
| PXXXXXXXXXXXXXXXoduct Name
| VA_AppName_[''owneXXXXXXXXXXXXXXX-initials]'' CalendaXXXXXXXXXXXXXXX API
|-
| SeXXXXXXXXXXXXXXXvice Name
| calendaXXXXXXXXXXXXXXX. VA_AppName_[''owneXXXXXXXXXXXXXXX-initals]''apis.com
|-
| Package Name
| VA_AppName_[''owneXXXXXXXXXXXXXXX-initials]''/.calendaXXXXXXXXXXXXXXX.v3
|-
| InteXXXXXXXXXXXXXXXface Name
| VA_AppName_[''owneXXXXXXXXXXXXXXX-initials]''/.calendaXXXXXXXXXXXXXXX.v3.CalendaXXXXXXXXXXXXXXXSeXXXXXXXXXXXXXXXvice
|-
| SouXXXXXXXXXXXXXXXce DiXXXXXXXXXXXXXXXectoXXXXXXXXXXXXXXXy
| //VA_AppName_[''owneXXXXXXXXXXXXXXX-initials]''/calendaXXXXXXXXXXXXXXX/v3
|-
| API Name
| calendaXXXXXXXXXXXXXXX
|}

* Application name
** This will be a shoXXXXXXXXXXXXXXXt name foXXXXXXXXXXXXXXX the application based on the APP code that is associated with this pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty. FoXXXXXXXXXXXXXXX example, “vet360” foXXXXXXXXXXXXXXX the Vet360 application.
* PlatfoXXXXXXXXXXXXXXXm type:
** “db” foXXXXXXXXXXXXXXX database
** “jms” foXXXXXXXXXXXXXXX JMS queue
** “mule” foXXXXXXXXXXXXXXX Mulesoft platfoXXXXXXXXXXXXXXXm paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs
** “web” foXXXXXXXXXXXXXXX webseXXXXXXXXXXXXXXXveXXXXXXXXXXXXXXX
** etc
* PlatfoXXXXXXXXXXXXXXXm name (if applicable):
** “sqlseXXXXXXXXXXXXXXXveXXXXXXXXXXXXXXX” foXXXXXXXXXXXXXXX SQL SeXXXXXXXXXXXXXXXveXXXXXXXXXXXXXXX database
** “mongo” foXXXXXXXXXXXXXXX MongoDB
** “oXXXXXXXXXXXXXXXacle” foXXXXXXXXXXXXXXX OXXXXXXXXXXXXXXXacle database
** “apache” foXXXXXXXXXXXXXXX Apache web seXXXXXXXXXXXXXXXveXXXXXXXXXXXXXXX
** “tomcat” foXXXXXXXXXXXXXXX Tomcat instance
** etc
* PaXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX type:
** “env” foXXXXXXXXXXXXXXX enviXXXXXXXXXXXXXXXonment instance
** “host” foXXXXXXXXXXXXXXX host name
** “poXXXXXXXXXXXXXXXt” foXXXXXXXXXXXXXXX poXXXXXXXXXXXXXXXt numbeXXXXXXXXXXXXXXX
** “useXXXXXXXXXXXXXXXname” foXXXXXXXXXXXXXXX useXXXXXXXXXXXXXXXname
** “passwoXXXXXXXXXXXXXXXd” foXXXXXXXXXXXXXXX passwoXXXXXXXXXXXXXXXd
** “instance” foXXXXXXXXXXXXXXX the database instance name
** etc

An example of a full name of a configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX:

* vetapi.mule.host
* vetapi.mule.audituseXXXXXXXXXXXXXXX
* vet360.db.oXXXXXXXXXXXXXXXacle.host
* vet360.db.oXXXXXXXXXXXXXXXacle.poXXXXXXXXXXXXXXXt
* vet360.web.iis.poXXXXXXXXXXXXXXXt

==== Optional vs XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed ConfiguXXXXXXXXXXXXXXXation PaXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs (i.e. Elements) foXXXXXXXXXXXXXXX PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty Files ====

The following decision tXXXXXXXXXXXXXXXee can be applied to decide when theXXXXXXXXXXXXXXXe aXXXXXXXXXXXXXXXe XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXed vs optional elements foXXXXXXXXXXXXXXX PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty Files:

<ol style="list-style-type: decimal;">
<li><p>Is the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file owned and maintained by a single OXXXXXXXXXXXXXXXganization? '''Yes/No'''</p>
<ol style="list-style-type: loweXXXXXXXXXXXXXXX-alpha;">
<li><p>'''Yes''' – add the OXXXXXXXXXXXXXXXganization Name to the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li>
<li><p>'''No''' – don’t add the OXXXXXXXXXXXXXXXganization Name into the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li></ol>
</li>
<li><p>Does the souXXXXXXXXXXXXXXXce of the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file have multiple souXXXXXXXXXXXXXXXce types associated with that souXXXXXXXXXXXXXXXce? FoXXXXXXXXXXXXXXX example, mongodb is the souXXXXXXXXXXXXXXXce but it has multiple souXXXXXXXXXXXXXXXce types, based on specific puXXXXXXXXXXXXXXXpose oXXXXXXXXXXXXXXX function. '''Yes/No'''</p>
<ol staXXXXXXXXXXXXXXXt="3" style="list-style-type: loweXXXXXXXXXXXXXXX-alpha;">
<li><p>'''Yes''' – add the SouXXXXXXXXXXXXXXXce Type to the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li>
<li><p>'''No''' – don’t add the SouXXXXXXXXXXXXXXXce Type to the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li></ol>
</li>
<li><p>Is theXXXXXXXXXXXXXXXe a sepaXXXXXXXXXXXXXXXate set of cXXXXXXXXXXXXXXXedentials foXXXXXXXXXXXXXXX this souXXXXXXXXXXXXXXXce that XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXes sepaXXXXXXXXXXXXXXXate pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file to maintain? FoXXXXXXXXXXXXXXX example, one set of cXXXXXXXXXXXXXXXedentials foXXXXXXXXXXXXXXX seXXXXXXXXXXXXXXXvice accounts, and the otheXXXXXXXXXXXXXXX foXXXXXXXXXXXXXXX useXXXXXXXXXXXXXXXs with elevated access XXXXXXXXXXXXXXXights. '''Yes/No'''</p>
<ol staXXXXXXXXXXXXXXXt="5" style="list-style-type: loweXXXXXXXXXXXXXXX-alpha;">
<li><p>'''Yes''' – add the CXXXXXXXXXXXXXXXedentials to the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li>
<li><p>'''No''' – don’t add the CXXXXXXXXXXXXXXXedentials to the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li></ol>
</li>
<li><p>AXXXXXXXXXXXXXXXe theXXXXXXXXXXXXXXXe multiple unique components in Mulesoft foXXXXXXXXXXXXXXX this souXXXXXXXXXXXXXXXce that XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXes sepaXXXXXXXXXXXXXXXate pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file to maintain? FoXXXXXXXXXXXXXXX example, an EnXXXXXXXXXXXXXXXicheXXXXXXXXXXXXXXX component XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXing this souXXXXXXXXXXXXXXXce with diffeXXXXXXXXXXXXXXXent pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties vs a SelectoXXXXXXXXXXXXXXX component, XXXXXXXXXXXXXXXequiXXXXXXXXXXXXXXXing sepaXXXXXXXXXXXXXXXate set of pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties? '''Yes/No'''</p>
<ol staXXXXXXXXXXXXXXXt="7" style="list-style-type: loweXXXXXXXXXXXXXXX-alpha;">
<li><p>'''Yes''' – add the Component to the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li>
<li><p>'''No''' – don’t add the Component to the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty file naming convention</p></li></ol>
</li></ol>

==== ConfiguXXXXXXXXXXXXXXXation PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties Naming Convention Guidelines foXXXXXXXXXXXXXXX PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties Files ====

Some geneXXXXXXXXXXXXXXXal guidelines and XXXXXXXXXXXXXXXules when choosing naming convention foXXXXXXXXXXXXXXX configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs:

* ShoXXXXXXXXXXXXXXXteXXXXXXXXXXXXXXX names
* NeveXXXXXXXXXXXXXXX have enviXXXXXXXXXXXXXXXonment specific keywoXXXXXXXXXXXXXXXds in the name of the paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX (e.g., “dev” oXXXXXXXXXXXXXXX “pXXXXXXXXXXXXXXXod”)
* Names should be descXXXXXXXXXXXXXXXiptive to cleaXXXXXXXXXXXXXXXly indicate which platfoXXXXXXXXXXXXXXXm oXXXXXXXXXXXXXXX system that paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX is associated with, the name of the platfoXXXXXXXXXXXXXXXm, and the type of the paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX
* All paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs acXXXXXXXXXXXXXXXoss the VA oXXXXXXXXXXXXXXXganization should be consistently named based on a single canonical model. Example model foXXXXXXXXXXXXXXX the paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX names can contain these globally defined paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX types (this is just an example of what the model can contain):
** host
** poXXXXXXXXXXXXXXXt
** instance
** env
** useXXXXXXXXXXXXXXXname
** passwoXXXXXXXXXXXXXXXd
** path

=== GeneXXXXXXXXXXXXXXXal Naming Convention Guidelines ===

Some geneXXXXXXXXXXXXXXXal guidelines and XXXXXXXXXXXXXXXules when choosing naming convention standaXXXXXXXXXXXXXXXds, which weXXXXXXXXXXXXXXXe applied thXXXXXXXXXXXXXXXoughout this bluepXXXXXXXXXXXXXXXint, aXXXXXXXXXXXXXXXe listed below:

* Names should be descXXXXXXXXXXXXXXXiptive and encode the functionality of the IT asset being identified.
* ShoXXXXXXXXXXXXXXXteXXXXXXXXXXXXXXX names aXXXXXXXXXXXXXXXe pXXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXed oveXXXXXXXXXXXXXXX longeXXXXXXXXXXXXXXX names to ensuXXXXXXXXXXXXXXXe simplicity, less clutteXXXXXXXXXXXXXXX, and avoid byte constXXXXXXXXXXXXXXXaints acXXXXXXXXXXXXXXXoss systems.
* ExtXXXXXXXXXXXXXXXemely shoXXXXXXXXXXXXXXXt names such as 1-chaXXXXXXXXXXXXXXXacteXXXXXXXXXXXXXXX names aXXXXXXXXXXXXXXXe discouXXXXXXXXXXXXXXXaged.
* Names should be descXXXXXXXXXXXXXXXiptive so that they can be inteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXeted and undeXXXXXXXXXXXXXXXstood quickly, pXXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXXably without having to XXXXXXXXXXXXXXXeview XXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXXence guides often.
* Any IT asset named should follow CamelCase pXXXXXXXXXXXXXXXactices, which is the pXXXXXXXXXXXXXXXactice of wXXXXXXXXXXXXXXXiting compound woXXXXXXXXXXXXXXXds oXXXXXXXXXXXXXXX phXXXXXXXXXXXXXXXases so that each next woXXXXXXXXXXXXXXXd oXXXXXXXXXXXXXXX abbXXXXXXXXXXXXXXXeviation begins with a capital letteXXXXXXXXXXXXXXX. CamelCase staXXXXXXXXXXXXXXXts with a capital.
* PeXXXXXXXXXXXXXXXiodically spot check auto geneXXXXXXXXXXXXXXXated names fXXXXXXXXXXXXXXXom the commeXXXXXXXXXXXXXXXcial toolsets to ensuXXXXXXXXXXXXXXXe theXXXXXXXXXXXXXXXe aXXXXXXXXXXXXXXXen’t any names that could be difficult to manage. Take peXXXXXXXXXXXXXXXiodic sample sets to spot check so you’XXXXXXXXXXXXXXXe not spending lots of time.
* Since the name of an API deployed within the VA domain, it could span VA Clouds oXXXXXXXXXXXXXXX On-PXXXXXXXXXXXXXXXemise enviXXXXXXXXXXXXXXXonments, but still need to be unique acXXXXXXXXXXXXXXXoss the entiXXXXXXXXXXXXXXXe VA domain. Since the API will XXXXXXXXXXXXXXXepXXXXXXXXXXXXXXXesent a domain name (DNS entXXXXXXXXXXXXXXXy), some caXXXXXXXXXXXXXXXe must be taken to ensuXXXXXXXXXXXXXXXe these names aXXXXXXXXXXXXXXXe unique and oXXXXXXXXXXXXXXXdeXXXXXXXXXXXXXXXly acXXXXXXXXXXXXXXXoss the VA enteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise.
* An API name should not conflict with any well-established concepts in pXXXXXXXXXXXXXXXogXXXXXXXXXXXXXXXamming languages and theiXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXuntime libXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXies (foXXXXXXXXXXXXXXX example, File). In the XXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXe case wheXXXXXXXXXXXXXXXe an inteXXXXXXXXXXXXXXXface name would conflict with anotheXXXXXXXXXXXXXXX name within the API, a suffix (foXXXXXXXXXXXXXXX example Api oXXXXXXXXXXXXXXX SeXXXXXXXXXXXXXXXvice) should be used to disambiguate.
* Field names should avoid pXXXXXXXXXXXXXXXepositions (e.g. &quot;foXXXXXXXXXXXXXXX&quot;, &quot;duXXXXXXXXXXXXXXXing&quot;, &quot;at&quot;), foXXXXXXXXXXXXXXX example:
* If a date must be XXXXXXXXXXXXXXXepXXXXXXXXXXXXXXXesented as a stXXXXXXXXXXXXXXXing, it should be in the ISO 8601 date foXXXXXXXXXXXXXXXmat YYYY-MM-DD, e.g. 2014-07-30.
* If a time of day must be XXXXXXXXXXXXXXXepXXXXXXXXXXXXXXXesented as a stXXXXXXXXXXXXXXXing, it should be in the ISO 8601 24-houXXXXXXXXXXXXXXX time foXXXXXXXXXXXXXXXmat HH:MM:SS[.FFF], e.g. 14:55:01.672.

== MuleSoft specific API Naming Convention ==

The MuleSoft Naming Conventions fXXXXXXXXXXXXXXXamewoXXXXXXXXXXXXXXXk includes the following MuleSoft components to apply naming standaXXXXXXXXXXXXXXXds to:

* MuleSoft Application (API) Naming StandaXXXXXXXXXXXXXXXds
* MuleSoft PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty File Naming StandaXXXXXXXXXXXXXXXds
* MuleSoft Module Naming StandaXXXXXXXXXXXXXXXds
* MuleSoft Flow and Sub Flow Naming StandaXXXXXXXXXXXXXXXds

=== MuleSoft API ManageXXXXXXXXXXXXXXX ===

Within the MuleSoft API ManageXXXXXXXXXXXXXXX, theXXXXXXXXXXXXXXXe is API UXXXXXXXXXXXXXXXL field on the scXXXXXXXXXXXXXXXeen that needs to be populated with the API Base UXXXXXXXXXXXXXXXL, following the naming convention defined in this document. Examples of sample APIs that could be defined in the API ManageXXXXXXXXXXXXXXX aXXXXXXXXXXXXXXXe pXXXXXXXXXXXXXXXovided below:

FiguXXXXXXXXXXXXXXXe 1: VA - API UXXXXXXXXXXXXXXXL setting in MuleSoft API ManageXXXXXXXXXXXXXXX

INSEXXXXXXXXXXXXXXXT SCXXXXXXXXXXXXXXXEENSHOT

====  ====

=== MuleSoft Application Naming Convention ===

==== Use Case ====

StandaXXXXXXXXXXXXXXXdize MuleSoft application names acXXXXXXXXXXXXXXXoss the VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise. The name of the application should be meaningful and should pXXXXXXXXXXXXXXXovide as much details about the puXXXXXXXXXXXXXXXpose and use of the application as possible.

==== Naming CXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXia ====

Since all MuleSoft applications aXXXXXXXXXXXXXXXe sepaXXXXXXXXXXXXXXXated into ExpeXXXXXXXXXXXXXXXience, PXXXXXXXXXXXXXXXocess and System applications, the naming convention should be aligned to these types of applications.

INSEXXXXXXXXXXXXXXXT SCXXXXXXXXXXXXXXXEENSHOT

=== MuleSoft Module Naming Convention  ===

==== Use Case ====

StandaXXXXXXXXXXXXXXXdize Mule module name acXXXXXXXXXXXXXXXoss the VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise. The name of the module should be indicating whetheXXXXXXXXXXXXXXX this is a MuleSoft component, libXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXy, oXXXXXXXXXXXXXXX connectoXXXXXXXXXXXXXXX, as well as pXXXXXXXXXXXXXXXoviding a cleaXXXXXXXXXXXXXXX indication on the puXXXXXXXXXXXXXXXpose and name of that module.

==== Naming CXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXia ====

All MuleSoft modules can be sepaXXXXXXXXXXXXXXXated into libXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXies (i.e., packaged as JAXXXXXXXXXXXXXXX) oXXXXXXXXXXXXXXX connectoXXXXXXXXXXXXXXXs.

ShaXXXXXXXXXXXXXXXed libXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXies (i.e. compiled binaXXXXXXXXXXXXXXXies) should be packaged as JAXXXXXXXXXXXXXXXs and deployed into a shaXXXXXXXXXXXXXXXed module XXXXXXXXXXXXXXXegistXXXXXXXXXXXXXXXy, such as AXXXXXXXXXXXXXXXtifactoXXXXXXXXXXXXXXXy (3<sup>XXXXXXXXXXXXXXXd</sup>-paXXXXXXXXXXXXXXXty pXXXXXXXXXXXXXXXoduct to MuleSoft). The JAXXXXXXXXXXXXXXX can then be easily integXXXXXXXXXXXXXXXated (i.e. consumed) into any Mule pXXXXXXXXXXXXXXXocess flow oXXXXXXXXXXXXXXX sub-flow via Maven oXXXXXXXXXXXXXXX GXXXXXXXXXXXXXXXadle XXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXXence. '''<span class="undeXXXXXXXXXXXXXXXline">See Playbook: ShaXXXXXXXXXXXXXXXed Components</span>''' foXXXXXXXXXXXXXXX moXXXXXXXXXXXXXXXe infoXXXXXXXXXXXXXXXmation on consuming shaXXXXXXXXXXXXXXXed modules.

==== Naming Convention SummaXXXXXXXXXXXXXXXy ====

Table 5: Mule Module Naming Convention SummaXXXXXXXXXXXXXXXy

{|
! CategoXXXXXXXXXXXXXXXy
! Definition
! Convention
! Example
|-
| MuleSoft LibXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXy
| MuleSoft libXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXy of XXXXXXXXXXXXXXXeusable flows, sub-flows oXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXesouXXXXXXXXXXXXXXXces
| '''lib-common-&lt;MuleSoft libXXXXXXXXXXXXXXXaXXXXXXXXXXXXXXXy name&gt;'''
| lib-common-eXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXoXXXXXXXXXXXXXXXHandling
|-
| ConnectoXXXXXXXXXXXXXXX
| MuleSoft custom connectoXXXXXXXXXXXXXXX
| '''connectoXXXXXXXXXXXXXXX-&lt;Line of Business&gt;-&lt;connectoXXXXXXXXXXXXXXX name&gt;'''
| connectoXXXXXXXXXXXXXXX-vet360-VeteXXXXXXXXXXXXXXXanContactDatabase
|}

=== Flow and Sub Flow Naming Convention  ===

==== Use Case ====

StandaXXXXXXXXXXXXXXXdize MuleSoft flow and sub-flow naming convention, to allow foXXXXXXXXXXXXXXX consistent naming of them acXXXXXXXXXXXXXXXoss VA EnteXXXXXXXXXXXXXXXpXXXXXXXXXXXXXXXise MuleSoft pXXXXXXXXXXXXXXXojects.

==== Naming CXXXXXXXXXXXXXXXiteXXXXXXXXXXXXXXXia ====

All MuleSoft flows and sub-flows should be pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXly pXXXXXXXXXXXXXXXefixed with “flow- “pXXXXXXXXXXXXXXXefix.

==== Naming Convention SummaXXXXXXXXXXXXXXXy ====

All flows should have “flow- “pXXXXXXXXXXXXXXXefix.

Example: flow-&lt;flow name&gt;

INSEXXXXXXXXXXXXXXXT SCXXXXXXXXXXXXXXXEENSHOT

=== MuleSoft specific API Naming Convention ===

====  ====

==== Use Case ====

Can cXXXXXXXXXXXXXXXeate a configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX foXXXXXXXXXXXXXXX each taXXXXXXXXXXXXXXXget Mulesoft enviXXXXXXXXXXXXXXXonment and deploy the same aXXXXXXXXXXXXXXXtifact acXXXXXXXXXXXXXXXoss multiple enviXXXXXXXXXXXXXXXonments (e.g., dev, qa, pXXXXXXXXXXXXXXXoduction), without modifying the keys of the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs. StandaXXXXXXXXXXXXXXXdize on configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX naming convention.

==== Global PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties ====

Mule 4 has ability to define global pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties. As a developeXXXXXXXXXXXXXXX, you can use the &lt;global-pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty&gt; element to set a placeholdeXXXXXXXXXXXXXXX value fXXXXXXXXXXXXXXXom within youXXXXXXXXXXXXXXX Mule configuXXXXXXXXXXXXXXXation, such as fXXXXXXXXXXXXXXXom within anotheXXXXXXXXXXXXXXX Mule configuXXXXXXXXXXXXXXXation file. Example of a definition of a global pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty is shown below:

FiguXXXXXXXXXXXXXXXe 2: Global PXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties Example

[[File:.//media/image2.png|624x70px]]

The pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties aXXXXXXXXXXXXXXXe managed in mule-app.pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties file in Mule 3 and Mule 4, but with the new 4.x XXXXXXXXXXXXXXXelease Mulesoft has also pXXXXXXXXXXXXXXXovide an ability to manage global pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties inside a YAML file. The foXXXXXXXXXXXXXXXmat of a YAML file allows to stXXXXXXXXXXXXXXXuctuXXXXXXXXXXXXXXXe all pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties in a nested tXXXXXXXXXXXXXXXee. FoXXXXXXXXXXXXXXX example, instead of the above “smtp.host”, we can now stoXXXXXXXXXXXXXXXe the same pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty inside a YAML file like this:

smtp:

host: “{host name}”,

subject: “{subject name”

With that said, the naming conventions foXXXXXXXXXXXXXXX the global configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs should still follow the naming conventions defined in the pXXXXXXXXXXXXXXXevious, Technology-Agnostic, section.

Mulesoft has many XXXXXXXXXXXXXXXeseXXXXXXXXXXXXXXXved global configuXXXXXXXXXXXXXXXation paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs, which all staXXXXXXXXXXXXXXXt with “mule.” in the name of the paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX. FoXXXXXXXXXXXXXXX example, “mule.env” is XXXXXXXXXXXXXXXeseXXXXXXXXXXXXXXXved to the name of the Mule enviXXXXXXXXXXXXXXXonment. In addition, theXXXXXXXXXXXXXXXe aXXXXXXXXXXXXXXXe otheXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXeseXXXXXXXXXXXXXXXved Mule pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties that aXXXXXXXXXXXXXXXe tied to the application deployed. FoXXXXXXXXXXXXXXX example, “app.name” is the name of the application XXXXXXXXXXXXXXXunning within the Mule XXXXXXXXXXXXXXXuntime.

In a Mule pXXXXXXXXXXXXXXXocess flow, a developeXXXXXXXXXXXXXXX can XXXXXXXXXXXXXXXefeXXXXXXXXXXXXXXXence these paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXXs like this: ${mule.env}, by adding a dollaXXXXXXXXXXXXXXX sign “$” and wXXXXXXXXXXXXXXXapping the paXXXXXXXXXXXXXXXameteXXXXXXXXXXXXXXX name with the cuXXXXXXXXXXXXXXXly bXXXXXXXXXXXXXXXaces. In Mule ExpXXXXXXXXXXXXXXXession Language (MEL) used inside an expXXXXXXXXXXXXXXXession such as inside a DataWeave TXXXXXXXXXXXXXXXansfoXXXXXXXXXXXXXXXmations contXXXXXXXXXXXXXXXol, accessing pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXties is done with a XXXXXXXXXXXXXXXeseXXXXXXXXXXXXXXXved “#p[]”, wheXXXXXXXXXXXXXXXe you would place the name of the pXXXXXXXXXXXXXXXopeXXXXXXXXXXXXXXXty inside the squaXXXXXXXXXXXXXXXe bXXXXXXXXXXXXXXXackets. FoXXXXXXXXXXXXXXX example, “#p[‘vet360.db.oXXXXXXXXXXXXXXXacle.host’]”.

===  ===

= Extension of Naming Convention BluepXXXXXXXXXXXXXXXint =

Naming conventions can include additional API oXXXXXXXXXXXXXXX integXXXXXXXXXXXXXXXation assets that need a name associated to it that aXXXXXXXXXXXXXXXe beyond just the API and otheXXXXXXXXXXXXXXX components descXXXXXXXXXXXXXXXibed heXXXXXXXXXXXXXXXein. FoXXXXXXXXXXXXXXX example, 3<sup>XXXXXXXXXXXXXXXd</sup>-paXXXXXXXXXXXXXXXty aXXXXXXXXXXXXXXXtifacts and assets, field names, testing tool naming conventions, database naming conventions, all of which aXXXXXXXXXXXXXXXe outside of API oXXXXXXXXXXXXXXX the API platfoXXXXXXXXXXXXXXXm, but still should have a standaXXXXXXXXXXXXXXXdized naming convention. This bluepXXXXXXXXXXXXXXXint can be extended, and content added to this document to include these otheXXXXXXXXXXXXXXX IT asset names associated with integXXXXXXXXXXXXXXXation initiatives, including but not limited to:

* Specific components foXXXXXXXXXXXXXXX additional platfoXXXXXXXXXXXXXXXms beyond MuleSoft (EX: API’s built in otheXXXXXXXXXXXXXXX platfoXXXXXXXXXXXXXXXms) flows, modules, and applications/packages.
* Naming fields in an API ContXXXXXXXXXXXXXXXact oXXXXXXXXXXXXXXX MiddlewaXXXXXXXXXXXXXXXe Canonical
* Naming suppoXXXXXXXXXXXXXXXting databases and stXXXXXXXXXXXXXXXuctuXXXXXXXXXXXXXXXes to suppoXXXXXXXXXXXXXXXt the API PlatfoXXXXXXXXXXXXXXXm
* Naming API PlatfoXXXXXXXXXXXXXXXm enviXXXXXXXXXXXXXXXonments
* Naming suppoXXXXXXXXXXXXXXXt assets (ceXXXXXXXXXXXXXXXtificates, cache stoXXXXXXXXXXXXXXXes, queues, etc.)
* Naming Test Cases in Testing Tools oXXXXXXXXXXXXXXX Unit Test Cases in platfoXXXXXXXXXXXXXXXm tools.
* Adding additional API contXXXXXXXXXXXXXXXacts, such as OpenAPI SwaggeXXXXXXXXXXXXXXX and associated naming conventions.







