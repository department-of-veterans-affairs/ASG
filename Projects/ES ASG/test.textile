"API Naming Convention 3":#api-naming-convention

"Objective 3":#objective

"Global and Enterprise Impacts of Naming Convention Standards 3":#global-and-enterprise-impacts-of-naming-convention-standards

"Cross Integration or Tech Platform Support 3":#cross-integration-or-tech-platform-support

"Cross Deployment Models 3":#cross-deployment-models

"Vendor Agnostic API Naming Convention 4":#vendor-agnostic-api-naming-convention

"VA Background Requirements 4":#va-background-requirements

"Naming Criteria 4":#naming-criteria

"Naming Convention Summary 5":#naming-convention-summary

"URL Examples 6":#url-examples

"Enviornment Naming Convention 6":#enviornment-naming-convention

"API Type 7":#api-type

"Organization Name 7":#organization-name

"Major/Minor Versions 8":#majorminor-versions

"API in Path 8":#api-in-path

"Canonical Business Object Name 8":#canonical-business-object-name

"RAML File Naming Convention 9":#raml-file-naming-convention

"Use Case 9":#use-case

"Naming Criteria 9":#naming-criteria-1

"Naming Convention Summary 9":#naming-convention-summary-1

"General Naming Convention Guidelines 10":#general-naming-convention-guidelines

"MuleSoft specific API Naming Convention 11":#mulesoft-specific-api-naming-convention

"MuleSoft API Manager 11":#mulesoft-api-manager

"MuleSoft Application Naming Convention 11":#mulesoft-application-naming-convention

"Use Case 11":#use-case-1

"Naming Criteria 11":#naming-criteria-2

"MuleSoft Module Naming Convention 11":#mulesoft-module-naming-convention

"Use Case 11":#use-case-2

"Naming Criteria 11":#naming-criteria-3

"Naming Convention Summary 12":#naming-convention-summary-2

"Flow and Sub Flow Naming Convention 12":#flow-and-sub-flow-naming-convention

"Use Case 12":#use-case-3

"Naming Criteria 12":#naming-criteria-4

"Naming Convention Summary 12":#naming-convention-summary-3

"Property Naming Convention 12":#property-naming-convention

"Use Case 12":#use-case-4

"External Property Placeholders 12":#external-property-placeholders

"Property File Naming Convention 12":#property-file-naming-convention

"Naming Convention Summary 13":#naming-convention-summary-4

"Formatting 13":#formatting

"Optional vs Required Elements for Property Files 14":#optional-vs-required-elements-for-property-files

"Extension of Blueprint 15":#extension-of-naming-convention-blueprint

h1(#api-naming-convention). API Naming Convention

h3(#section). 

h2(#objective). Objective

This blueprint defines an API naming convention for the Veteran's Affairs enterprise, supporting all middleware and API management solutions and supporting all Veteran's Affairs organization units and lines of businesses. Most importantly, define an API URL standard.

h3(#global-and-enterprise-impacts-of-naming-convention-standards). Global and Enterprise Impacts of Naming Convention Standards

The naming conventions standards contained herein are applicable across any centralized or geographically distributed implementations of Integrations and API's.

h3(#cross-integration-or-tech-platform-support). Cross Integration or Tech Platform Support

The naming convention standards contained herein for API are applicable across integration platforms, as they are agnostic of the underlying technology stack. For example, if the API's are developed on MuleSoft, 3Scale, Kong, CA Layer, or Spring, the API naming conventions should remain consistent and continue to be relevant no matter of the technology platform used to build and host these APIs. Specific vendor applicability is noted in separate sections.

h3(#cross-deployment-models). Cross Deployment Models

The naming convention standards contained herein for API are applicable across deployment and hosting models, whether the API is deployed to a Cloud (IaaS, PaaS, or SaaS) or On Premise, as the naming conventions either accounts for the deployment model or is agnostic of the underlying hosting and cloud model. The conventions account for deployment in the VA Enterprise Cloud (VAEC) deployment model to ensure uniqueness across the VA.

The VA naming convention standard requires the API name to be unique no matter the region, locale, or infrastructure environment due to being deployed in a domain that supports the cloud hosted environment across clouds, as well as On Premise.

Note, whether an API is Internal facing, External facing, or both for Consumer use, is addressed and controlled via API policies, and not addressed via API naming conventions. For more information please see *Playbook: API Policies framework.*

Note, the scope of this API Naming Convention document is to focus on the major API naming convention elements, including and up to the application name. This blueprint document does not address granular SOAP and REST operation naming conventions. *Please see Playbook API Operations for guidelines on such.*

h2(#vendor-agnostic-api-naming-convention). Vendor Agnostic API Naming Convention

h3(#section-1). 

h3(#va-background-requirements). VA Background Requirements

Table : VA API Naming Conventions Requirements

|_. ID|_. Requirement|_. Framework Impacts|
|1|Veteran's Affairs has a preference to host API's, applications, and IT solutions in the Veterans Affairs Enterprise Cloud (VAEC). Some API's may still be hosted On Premise.|The VA Naming Convention accounts for Cloud or On&#45;Premise solutions.|
|2|VA does a majority of their business in USA.|The Naming Convention will not account for a region or locale in the naming convention because the majority of VA is USA based.

Even for other regions outside of the USA, the API Naming conventions does factor in the different Organization Name into the naming standard and therefore could allow the API's in other countries to be differentiated by the Organization Name

Should VA business model change the future, where there is more globalization and geographic differences outside of the USA, the Naming Conventions shall be adjusted at that time.|
|5|VA has many Use Cases that involve Salesforce.com and enterprise systems (although, these are not the only Use Cases, and this framework is a broader, enterprise level framework)|The Naming Conventions shall account for the Canonical representation of business objects, such as “Veteran, “Address”, and others.|

h3(#naming-criteria). Naming Criteria

Following the industry standards on web resource definition, any API URL always consists of the protocol, host, port, base path, RESTful operation, and, finally, parameters to the API t.

With the API URL naming convention, the following required and optional criteria should be met:

<ol style="list-style-type: decimal;">
<li><p>Designate the environment hosting the API (dev, qa, production, uat, etc.).</p></li>
<li><p>Define whether the API is Experience, Process, or System API. *(See Playbook section on “API Layers”).*</p>
<ol style="list-style-type: lower-alpha;">
<li><p>Experience API is targeted to a specific UI platform such as mobile app, desktop portal, or tablet.</p></li>
<li><p>Process API is used to orchestrate and provide business logic across two or more system APIs.</p></li>
<li><p>System API is used to integrate with a back office or external system or platform (e.g., a database or an ERP system). Typically, follows a Create/Read/Update/Delete model with system interaction.</p></li>
</ol>
</li>
<li><p>Distinguish the Veteran's Affairs enterprise Organization Name who owns the API. For project teams where, multiple teams are developing and contributing to the API, the Organization Name who has ownership of the API should be noted in the naming convention. If the API is not owned nor is functionally tied to an Organization, then it should not be part of the URL. Instead, the word “Enterprise” can be substituted in for the Organization Name.</p></li>
<li><p>Define the Veteran's Affairs enterprise application serving this API. I.E. what system is the “Provider” of the API?</p></li>
<li><p>Identify the key Canonical Business Object that the API represents for the enterprise.</p></li>
<li><p>Define the base API path, /api, needed to differentiate all APIs from other HTTP resources throughout the enterprise at Veteran's Affairs.</p></li>
<li><p>Provide ability by the API consumer to easily determine what version of the API is being consumed by incorporating version numbering into the API URL itself.</p></li>
<li><p>Define the RESTful operation and parameters (*See Playbook section: REST Operation Naming Convention section).*</p></li>
</ol>

Below is a table documenting which criteria are required and which are optional in the VA API naming convention standard:

h3(#naming-convention-summary). Naming Convention Summary

Table : API Naming Convention Summary

|_. Category|_. Req/Opt|_. Example|
|Environment|Required|dev

qa

uat|
|API Type

(Experience, Process, System)|Required|exp for Experience

proc for Process

sys for System|
|Organization Name|Required|Vet360

DAS

iHub

VistA

Enterprise (Not associated with an Organization)

C4E (owned by the API Governance team)|
|API Path|Required|/api in the path to differentiate the APIs|
|API Version|Required|v1, v2, v3|
|Application|Required|veteranportal (experience API)

address (process API)

addressdetails (system API)|
|Canonical

(Enterprise Business Object)|Optional|customer

account

address|

h3(#url-examples). URL Examples

Below are visual examples of the API URL elements associated with VA standard. The convention defined herein shall be used for API's developed outside of a specific API or vendor platform.

VA API URL:

Figure 1: VA API Example

!{width:624px;height:122px;}media/image1.emf!

Note, the naming standard shall enable unique API names across all of VA enterprise.

h3(#enviornment-naming-convention). Enviornment Naming Convention

The naming convention for the API's deployed in VA should incorporate environment names always, (The assumption is that the API shall be deployed across multiple environments).

As an example, the environment should be the prefix for each of the deployed API's except for Production, which doesn't have the environment prefix.

Normally, the continental region is also included in the prefix of an API via industry best practice, but since VA pre&#45;dominantly operates in in the US, the current naming convention doesn't have any global region requirements (The assumption is all APIs are US based).

Table 3: VA Environment Naming Convention Summary

|_. *Environment*|_. *API name*|_. *Application URL (App URL)*|
|DEV|dev&#45;exp&#45;vet360|dev&#45;exp&#45;vet360.va.gov:8081|
|QA|qa&#45;exp&#45;vet360|qa&#45; exp&#45;vet360.va.gov:8081|
|PROD|exp&#45;vet360|exp&#45;vet360.va.gov:8081|

h3(#section-2). 

h3(#api-type). API Type

Table 4: API Type applied to API Naming Convention

|_. Category|_. Definition|_. Convention|_. Example|
|Experience Application|Experience application, targeted to the mobile, desktop, or tablet experience|*exp&#45;&lt;Organization Name&gt;*|exp&#45;vet360|
|Process Application|Process application, designed for business logic orchestration and facilitation across multiple system API's|*proc&#45;&lt;Organization Name&gt;*|proc&#45;vet360|
|System Application|System application, targeted for interacting with one or multiple backend systems|*sys&#45;&lt;Organization Name&gt;*|sys&#45;vet360|

h3(#section-3). 

h3(#organization-name). Organization Name

The main VA Organization Name is always part of the API URL path. For example, the Organization Name, “Enterprise Services” or “Vet360”, is added as part of the API base path.

The framework is flexible in that it allows for any VA Organization Names to be added or subtracted from the API path naming convention, if the Organization Name is unique&#42;.

If an API is not associated, owned, or managed by a single VA Organization, then it must be reflected in the naming convention as “Enterprise”. This means multiple teams own the API and ownership cannot be delineated to a single VA Organization. If the C4E or the Integration governance team owns the API, then it's reflected as “C4E” naming convention in place of the Organization Name.

In this context, the Organizational Names examples for Veteran's Affairs and are provided below:

Examples of Line of Business Team Name for Veteran's Affairs, include:

* Enterprise Services (API URL path element: “/EnterpriseServices”)
* Vet360 (API URL path element: “/Vet360”)
* DAS (API URL path element: “/DAS”)
* C4E (API URL path element: “/C4E”)
* No Team or Shared (API URL path element: “/Enterprise”)

(&#42; Note, the Organization Name should be unique across teams, but the naming conventions framework could still allow for duplicate Organization Names, if API name uniqueness is applied by using another parameter from the URL path, such as the URL elements: “Application”, “Canonical”, or something else in the URL path.

h3(#majorminor-versions). Major/Minor Versions

We recommend having only the major versions in the API Base URL naming convention (e.g., “v1”), as opposed to showing major/minor versions (e.g., “v1.0” or even “v1.0.0”). The consumer of the API should be able to easily determine by the API URL what major version of the API is being consumed. The consumer of the API mostly won't be concerned with the minor release version from the actual API URL. This granular version information should be provided to the API consumer in the detailed release notes, provided to the consumer or Veteran's Affairs partner via the API Portal or via written release notes.

The API Portal or API Manager should capture additional metadata about each public API, such as major/minor API version, all system integrations for that API, owner of the API, examples of consuming the API within the internal Veteran's Affairs platforms, and other detailed information about the API.

On the contrary, the API Base URL should provide clear and targeted information about that API, its owner, line of business, API type, major released version, and the application.

Note, this “Naming Conventions Framework” content does not replace the need for another framework for “Version Control Framework”. *Please see Playbook section on: Version Control*

h3(#api-in-path). API in Path

“/api” will be part of the API URL base path as illustrated above as a required element in the API Base URL path. The reason for having /api always being part of the path is two&#45;fold:

* Having /api in the path helps configure load balancing solutions (i.e., for L7 path&#45;based balancing of load across multiple instances), as well as to configure any type of internal gateway and firewall policies for all Veteran's Affairs Enterprise APIs.
* Having the word /api in the path instructs the consuming applications that this URL is an API URL, which follows certain API configuration and naming standards.

h2(#section-4). 

As described in other sections, it is recommended to include a version number in the base path of an API to provide flexibility when it does come time to upgrade consumers to a latest version.  With a versioned API, you will have the option to deploy a latest version of the API while continuing to support consumers of the outdated version because you don't have to immediately deprecate the outdated version. You can have two concurrent versions of the

h3(#canonical-business-object-name). Canonical Business Object Name

If an API is associated with a Canonical Business Object, that should be captured in the API Naming Convention URL path. Some API's may not be associated with a Canonical Business Object, so this criterion is “optional”.

The following decision tree can be applied to decide when it is required vs optional:

<ol style="list-style-type: decimal;">
<li><p>Is the API associated with a Canonical Business Object? *Yes/No*</p>
<ol style="list-style-type: lower-alpha;">
<li><p>*Yes*  -  add the Canonical Business Object name to the API naming convention</p></li>
<li><p>*No*  -  don't add the Canonical Business object name into the API naming convention</p></li>
</ol>
</li>
</ol>

Final API URL should look like this:

https://dev&#45;exp&#45;vet360.va.gov:8081/api/v1/veteranportal/address (with optional Canonical Business Object element named “address”)

https://dev&#45;exp&#45;vet360.va.gov:8081/api/v1/veteranportal (without optional Canonical element)

h3(#section-5). 

h3(#raml-file-naming-convention). RAML File Naming Convention 

h4(#use-case). Use Case

Provide a consistent and standard naming convention for the RAML files.

h4(#naming-criteria-1). Naming Criteria

All RAML files should follow standard naming convention of a standard file prefix “RAML” with the rest of the name tied to the name of the API or application.

h4(#naming-convention-summary-1). Naming Convention Summary

The name of each RAML file should be:

*RAML*&#45;&lt;Organization Name&gt;&#45;&lt;Application Name&gt;

For example:

*raml*&#45;Vet360&#45;VeteranPortal

h3(#general-naming-convention-guidelines). General Naming Convention Guidelines

Some general guidelines and rules when choosing naming convention standards, which were applied throughout this blueprint, are listed below:

* Names should be descriptive and encode the functionality of the IT asset being identified.
* Shorter names are preferred over longer names to ensure simplicity, less clutter, and avoid byte constraints across systems.
* Extremely short names such as 1&#45;character names are discouraged.
* Names should be descriptive so that they can be interpreted and understood quickly, preferably without having to review reference guides often.
* Any IT asset named should follow CamelCase practices, which is the practice of writing compound words or phrases so that each next word or abbreviation begins with a capital letter. CamelCase starts with a capital.
* Periodically spot check auto generated names from the commercial toolsets to ensure there aren't any names that could be difficult to manage. Take periodic sample sets to spot check so you're not spending lots of time.
* Since the name of an API deployed within the VA domain, it could span VA Clouds or On&#45;Premise environments, but still need to be unique across the entire VA domain. Since the API will represent a domain name (DNS entry), some care must be taken to ensure these names are unique and orderly across the VA enterprise.

h2(#mulesoft-specific-api-naming-convention). MuleSoft specific API Naming Convention

The MuleSoft Naming Conventions framework includes the following MuleSoft components to apply naming standards to:

* MuleSoft Application (API) Naming Standards
* MuleSoft Property File Naming Standards
* MuleSoft Module Naming Standards
* MuleSoft Flow and Sub Flow Naming Standards

h3(#mulesoft-api-manager). MuleSoft API Manager

Within the MuleSoft API Manager, there is API URL field on the screen that needs to be populated with the API Base URL, following the naming convention defined in this document. Examples of sample APIs that could be defined in the API Manager are provided below:

Figure : Veteran's Affairs &#45; API URL setting in MuleSoft API Manager

INSERT SCREENSHOT

h4(#section-6). 

h3(#mulesoft-application-naming-convention). MuleSoft Application Naming Convention

h4(#use-case-1). Use Case

Standardize MuleSoft application names across the Veteran's Affairs enterprise. The name of the application should be meaningful and should provide as much details about the purpose and use of the application as possible.

h4(#naming-criteria-2). Naming Criteria

Since all MuleSoft applications are separated into Experience, Process and System applications, the naming convention should be aligned to these types of applications.

INSERT SCREENSHOT

h3(#mulesoft-module-naming-convention). MuleSoft Module Naming Convention 

h4(#use-case-2). Use Case

Standardize Mule module name across the Veteran's Affairs enterprise. The name of the module should be indicating whether this is a MuleSoft component, library, or connector, as well as providing a clear indication on the purpose and name of that module.

h4(#naming-criteria-3). Naming Criteria

All MuleSoft modules can be separated into libraries (i.e., packaged as JAR) or connectors.

Shared libraries (i.e. compiled binaries) should be packaged as JARs and deployed into a shared module registry, such as Artifactory (3[^rd^]&#45;party product to MuleSoft). The JAR can then be easily integrated (i.e. consumed) into any Mule process flow or sub&#45;flow via Maven or Gradle reference. *See Playbook: Shared Components* for more information on consuming shared modules.

h4(#naming-convention-summary-2). Naming Convention Summary

Table 5: Mule Module Naming Convention Summary

|_. Category|_. Definition|_. Convention|_. Example|
|MuleSoft Library|MuleSoft library of reusable flows, sub&#45;flows or resources|*lib&#45;common&#45;&lt;MuleSoft library name&gt;*|lib&#45;common&#45;errorHandling|
|Connector|MuleSoft custom connector|*connector&#45;&lt;Line of Business&gt;&#45;&lt;connector name&gt;*|connector&#45;vet360&#45;VeteranContactDatabase|

h3(#flow-and-sub-flow-naming-convention). Flow and Sub Flow Naming Convention 

h4(#use-case-3). Use Case

Standardize MuleSoft flow and sub&#45;flow naming convention, to allow for consistent naming of them across Veteran's Affairs enterprise MuleSoft projects.

h4(#naming-criteria-4). Naming Criteria

All MuleSoft flows and sub&#45;flows should be properly prefixed with “flow&#45; “prefix.

h4(#naming-convention-summary-3). Naming Convention Summary

All flows should have “flow&#45; “prefix.

Example: flow&#45;&lt;flow name&gt;

INSERT SCREENSHOT

h3(#property-naming-convention). Property Naming Convention 

h4(#use-case-4). Use Case

Can create a property file for each target Mulesoft environment and deploy the same artifact across multiple environments (e.g., dev, qa, production), without modifying the keys of the property parameters. Standardize on property file and property key naming conventions.

h4(#external-property-placeholders). External Property Placeholders

The proposed solution externalizes environment specific information to property files located on

a specific server path (e.g. /opt/mule/mule&#45;ext&#45;configs). These property files can/will be picked up by each Mule application using a global configuration named: &lt;context:property&#45;placeholder&gt;

In practice, property&#45;placeholders work exactly the same as the default mule&#45;app.properties file

included on every Mule application and properties defined on property files (as key=value pairs)

can be read in the same way: ${myproperty}

h4(#property-file-naming-convention). Property File Naming Convention

Given these files can contain pretty much anything, it is recommended to define a naming convention that would provide enough granularity, so that each application could reference only what is needed

without adding too much complexity.

The current approach takes the following naming conventions:

&lt;Organization Name&gt;&#42;&#45;&lt;source&gt;&#45;&lt;source&#45;type&gt;&#42;&#45;&lt;credentials&gt;&#42;&#45;&lt;component&gt;&#42;.properties

Below is a table that explains each property file name convention part, with examples:

h4(#naming-convention-summary-4). Naming Convention Summary

Table 6: Mule Property Naming Convention Summary

|_. Category|_. Definition|_. Req/Opt|_. Example|
|Organization Name|Represents VA Organization Name|*Optional*|* *Vet360&#45;*mongodb.propeties|
|Source|Represents the source system for which you are externalizing the properties (e.g. mongodb)|*Required*|* *mongodb* .properties|
|Source&#45;Type|Provides ability to specify the specific type of source (e.g. amqp with configuration of type A, B or C).|*Optional*|* amqp&#45;*A*&#45;producer.properties
* amqp&#45;*B*&#45;producer.properties|
|Credentials|For some systems there may be a completely

separate set of credentials for each component being build. In this situation, it is recommended to define multiple credential&#45;specific property files instead of having a full copy of all the

configuration for every component|*Optional*|* amqp&#45;*credentials*&#45;enricher.properties
* amqp&#45;*credentials*&#45;selector.

properties

* amqp&#45;*credentials*&#45;listener.properties|
|Component|Occasionally, there is a need to have a set of properties per component, in which case it is recommended to define it at the end of the name.|*Optional*|* amqp&#45;credentials&#45;*enricher*.properties
* amqp&#45;credentials&#45;*selector*.properties|

Final Property File naming convention should look like this:

* &lt;source&gt;&#45;&lt;source&#45;type&gt;&#45;&lt;credentials&gt;&#45;&lt;component&gt;.properties

Notice that only &lt;source&gt; is required, with the rest being optional.

h4(#formatting). Formatting

Each property file should start by defining which system it's meant for surrounded by

triple hashtags (### &lt;system&gt; ###).

Next, each set of related properties should have a sub&#45;header describing that group

starting with a hashtag (# &lt;description&gt;)

Example:

### Vet360 amq ###

# Connection

aaa.csf.connectionNameList=svm2038pdv.dev.va.gov(1414),svm2038pdv.dev.va.gov(1415),svm2038pdv.dev.va.gov(1416)

cat.csf.clientReconnectTimeout=3600

cat.csf.queueManager=SVM2038PDV

cat.csf.transportType=1

cat.csf.targetClientMatching=true

# Vet360 SSL Config

cat.wmq.sSLCipherSuite=TLS&#95;RSA&#95;WITH&#95;AES&#95;256&#95;CBC&#95;SHA256

cat.wmq.ssl.keyStorePassword=password

h4(#optional-vs-required-elements-for-property-files). Optional vs Required Elements for Property Files

The following decision tree can be applied to decide when there are required vs optional elements for Property Files:

<ol style="list-style-type: decimal;">
<li><p>Is the property file owned and maintained by a single Organization? *Yes/No*</p>
<ol style="list-style-type: lower-alpha;">
<li><p>*Yes*  -  add the Organization Name to the property file naming convention</p></li>
<li><p>*No*  -  don't add the Organization Name into the property file naming convention</p></li>
</ol>
</li>
<li><p>Does the source of the property file have multiple source types associated with that source? For example, mongodb is the source but it has multiple source types, based on specific purpose or function. *Yes/No*</p>
<ol start="3" style="list-style-type: lower-alpha;">
<li><p>*Yes*  -  add the Source Type to the property file naming convention</p></li>
<li><p>*No*  -  don't add the Source Type to the property file naming convention</p></li>
</ol>
</li>
<li><p>Is there a separate set of credentials for this source that requires separate property file to maintain? For example, one set of credentials for service accounts, and the other for users with elevated access rights. *Yes/No*</p>
<ol start="5" style="list-style-type: lower-alpha;">
<li><p>*Yes*  -  add the Credentials to the property file naming convention</p></li>
<li><p>*No*  -  don't add the Credentials to the property file naming convention</p></li>
</ol>
</li>
<li><p>Are there multiple unique components in Mulesoft for this source that requires separate property file to maintain? For example, an Enricher component requiring this source with different properties vs a Selector component, requiring separate set of properties? *Yes/No*</p>
<ol start="7" style="list-style-type: lower-alpha;">
<li><p>*Yes*  -  add the Component to the property file naming convention</p></li>
<li><p>*No*  -  don't add the Component to the property file naming convention</p></li>
</ol>
</li>
</ol>



h2(#extension-of-naming-convention-blueprint). Extension of Naming Convention Blueprint

Naming conventions can include additional API or integration assets that need a name associated to it that are beyond just the API and other components described herein. For example, 3[^rd^]&#45;party artifacts and assets, field names, testing tool naming conventions, database naming conventions, all of which are outside of API or the API platform, but still should have a standardized naming convention. This blueprint can be extended and content added to this document to include these other IT asset names associated with integration initiatives, including but not limited to:

* Specific components for additional platforms beyond MuleSoft (EX: API's built in other platforms) flows, modules, and applications/packages.
* Naming fields in an API Contract or Middleware Canonical
* Naming supporting databases and structures to support the API Platform
* Naming API Platform environments
* Naming support assets (certificates, cache stores, queues, etc.)
* Naming Test Cases in Testing Tools or Unit Test Cases in platform tools.
* Adding additional API contracts, such as OpenAPI Swagger and associated naming conventions.

